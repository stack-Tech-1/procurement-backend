generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  uuid          String         @unique @default(uuid())
  name          String?
  email         String         @unique
  password      String
  roleId        Int
  vendorId      Int?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accessCode    String?
  status        String         @default("ACTIVE")
  approvals     Approval[]
  auditLogs     AuditLog[]     @relation("UserAuditLogs")
  documents     Document[]     @relation("uploadedBy")
  evaluations   Evaluation[]   @relation("UserEvaluations")
  ipcs          IPC[]          @relation("UserIPCs")
  notifications Notification[] @relation("UserNotifications")
  rfqs          RFQ[]          @relation("UserRFQs")
  role          Role           @relation(fields: [roleId], references: [id])
  vendor        Vendor?        @relation(fields: [vendorId], references: [id])
}

model Role {
  id    Int     @id @default(autoincrement())
  desc  String?
  name  String  @unique
  users User[]
}

model Vendor {
  id           Int              @id @default(autoincrement())
  code         String?          @unique
  name         String
  contactName  String?
  contactEmail String?
  contactPhone String?
  status       VendorStatus     @default(NEW)
  address      String?
  country      String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  materials    CSI_Material[]   @relation("CSI_MaterialToVendor")
  contracts    Contract[]
  priceEntries PriceEntry[]
  submissions  RFQSubmission[]
  users        User[]
  documents    VendorDocument[]
  categories   VendorCategory[] @relation("VendorToVendorCategory")
}

model VendorCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendors   Vendor[] @relation("VendorToVendorCategory")
}

model VendorDocument {
  id         Int       @id @default(autoincrement())
  vendorId   Int
  docType    String
  url        String
  fileName   String
  expiryDate DateTime?
  uploadedAt DateTime  @default(now())
  vendor     Vendor    @relation(fields: [vendorId], references: [id])
}

model CSI_Material {
  id              Int          @id @default(autoincrement())
  csiCode         String?
  name            String
  unit            String?
  defaultVendorId Int?
  defaultVendor   Vendor?      @relation("CSI_MaterialToVendor", fields: [defaultVendorId], references: [id])
  priceEntries    PriceEntry[]
}

model PriceEntry {
  id            Int          @id @default(autoincrement())
  materialId    Int
  vendorId      Int
  unitPrice     Float
  currency      String       @default("NGN")
  createdAt     DateTime     @default(now())
  effectiveDate DateTime     @default(now())
  expiryDate    DateTime?
  updatedAt     DateTime     @updatedAt
  material      CSI_Material @relation(fields: [materialId], references: [id])
  vendor        Vendor       @relation(fields: [vendorId], references: [id])
}

model RFQ {
  id                   Int             @id @default(autoincrement())
  rfqNumber            String          @unique
  projectName          String
  packageScope         String?
  itemDesc             String?
  csiCode              String?
  estimatedUnitPrice   Float?
  requiredDate         DateTime?
  targetSubmissionDate DateTime?
  currency             String          @default("SAR")
  createdById          Int
  status               RFQStatus       @default(DRAFT)
  createdAt            DateTime        @default(now())
  description          String?
  dueDate              DateTime?
  title                String
  updatedAt            DateTime        @updatedAt
  contracts            Contract[]      @relation("RFQContract")
  createdBy            User            @relation("UserRFQs", fields: [createdById], references: [id])
  submissions          RFQSubmission[]
  attachments          Document[]      @relation("rfqAttachments")
}

model RFQSubmission {
  id          Int          @id @default(autoincrement())
  rfqId       Int
  vendorId    Int
  submittedAt DateTime?    @default(now())
  totalValue  Float?
  currency    String       @default("SAR")
  docUrl      String?
  items       Json?
  status      String?
  totalAmount Float?
  evaluations Evaluation[]
  rfq         RFQ          @relation(fields: [rfqId], references: [id])
  vendor      Vendor       @relation(fields: [vendorId], references: [id])
}

model Evaluation {
  id              Int           @id @default(autoincrement())
  submissionId    Int
  evaluatorId     Int
  technicalScore  Float?
  financialScore  Float?
  experienceScore Float?
  responsiveness  Float?
  otherScore      Float?
  totalScore      Float?
  comments        String?
  createdAt       DateTime      @default(now())
  evaluator       User          @relation("UserEvaluations", fields: [evaluatorId], references: [id])
  submission      RFQSubmission @relation(fields: [submissionId], references: [id])
}

model Contract {
  id              Int              @id @default(autoincrement())
  contractNumber  String           @unique
  rfqId           Int?
  vendorId        Int
  contractValue   Float
  currency        String           @default("SAR")
  startDate       DateTime?
  endDate         DateTime?
  status          String?
  createdAt       DateTime         @default(now())
  rfq             RFQ?             @relation("RFQContract", fields: [rfqId], references: [id])
  vendor          Vendor           @relation(fields: [vendorId], references: [id])
  documents       Document[]       @relation("ContractDocuments")
  ipcs            IPC[]
  variationOrders VariationOrder[]
}

model VariationOrder {
  id          Int      @id @default(autoincrement())
  voRef       String   @unique
  contractId  Int
  description String?
  costImpact  Float?
  timeImpact  Int?
  status      String?
  createdAt   DateTime @default(now())
  contract    Contract @relation(fields: [contractId], references: [id])
}

model IPC {
  id              Int        @id @default(autoincrement())
  ipcNumber       String     @unique
  projectName     String?
  contractId      Int
  periodFrom      DateTime?
  periodTo        DateTime?
  currentValue    Float
  cumulativeValue Float?
  deductions      Float?
  netPayable      Float?
  status          IPCStatus  @default(SUBMITTED)
  submittedById   Int
  createdAt       DateTime   @default(now())
  attachments     Document[] @relation("IPCAttachments")
  contract        Contract   @relation(fields: [contractId], references: [id])
  submittedBy     User       @relation("UserIPCs", fields: [submittedById], references: [id])
}

model Document {
  id             Int       @id @default(autoincrement())
  fileName       String
  fileUrl        String
  url            String
  mimeType       String?
  size           Int?
  uploadedById   Int?
  uploadedAt     DateTime  @default(now())
  ipcId          Int?
  contractId     Int?
  contract       Contract? @relation("ContractDocuments", fields: [contractId], references: [id])
  ipc            IPC?      @relation("IPCAttachments", fields: [ipcId], references: [id])
  uploadedBy     User?     @relation("uploadedBy", fields: [uploadedById], references: [id])
  rfqAttachments RFQ[]     @relation("rfqAttachments")
}

model Approval {
  id         Int            @id @default(autoincrement())
  entityType String
  entityId   Int
  approverId Int
  sequence   Int
  status     ApprovalStatus @default(PENDING)
  comment    String?
  createdAt  DateTime       @default(now())
  actedAt    DateTime?
  approver   User           @relation(fields: [approverId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  entity    String?
  entityId  Int?
  data      Json?
  createdAt DateTime @default(now())
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
}

enum UserStatus {
  PENDING
  ACTIVE
}

enum RoleName {
  ADMIN
  PROCUREMENT_MANAGER
  PROCUREMENT_ENGINEER
  COST_MANAGER
  PROJECT_MANAGER
  TECHNICAL_OFFICE
  DATA_CONTROLLER
  VENDOR_USER
}

enum VendorStatus {
  NEW
  UNDER_REVIEW
  APPROVED
  REJECTED
  BLACKLISTED
}

enum RFQStatus {
  DRAFT
  ISSUED
  OPEN
  CLOSED
  AWARDED
  CANCELED
}

enum IPCStatus {
  SUBMITTED
  PROCUREMENT_REVIEW
  TECHNICAL_APPROVED
  FINANCE_REVIEW
  APPROVED
  PAID
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  ESCALATED
}
