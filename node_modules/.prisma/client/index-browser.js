
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  vendorId: 'vendorId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accessCode: 'accessCode',
  status: 'status'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  desc: 'desc',
  name: 'name'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  contactName: 'contactName',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  status: 'status',
  address: 'address',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorDocumentScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  docType: 'docType',
  url: 'url',
  fileName: 'fileName',
  expiryDate: 'expiryDate',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.CSI_MaterialScalarFieldEnum = {
  id: 'id',
  csiCode: 'csiCode',
  name: 'name',
  unit: 'unit',
  defaultVendorId: 'defaultVendorId'
};

exports.Prisma.PriceEntryScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  vendorId: 'vendorId',
  unitPrice: 'unitPrice',
  currency: 'currency',
  createdAt: 'createdAt',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  updatedAt: 'updatedAt'
};

exports.Prisma.RFQScalarFieldEnum = {
  id: 'id',
  rfqNumber: 'rfqNumber',
  projectName: 'projectName',
  packageScope: 'packageScope',
  itemDesc: 'itemDesc',
  csiCode: 'csiCode',
  estimatedUnitPrice: 'estimatedUnitPrice',
  requiredDate: 'requiredDate',
  targetSubmissionDate: 'targetSubmissionDate',
  currency: 'currency',
  createdById: 'createdById',
  status: 'status',
  createdAt: 'createdAt',
  description: 'description',
  dueDate: 'dueDate',
  title: 'title',
  updatedAt: 'updatedAt'
};

exports.Prisma.RFQSubmissionScalarFieldEnum = {
  id: 'id',
  rfqId: 'rfqId',
  vendorId: 'vendorId',
  submittedAt: 'submittedAt',
  totalValue: 'totalValue',
  currency: 'currency',
  docUrl: 'docUrl',
  items: 'items',
  status: 'status',
  totalAmount: 'totalAmount'
};

exports.Prisma.EvaluationScalarFieldEnum = {
  id: 'id',
  submissionId: 'submissionId',
  evaluatorId: 'evaluatorId',
  technicalScore: 'technicalScore',
  financialScore: 'financialScore',
  experienceScore: 'experienceScore',
  responsiveness: 'responsiveness',
  otherScore: 'otherScore',
  totalScore: 'totalScore',
  comments: 'comments',
  createdAt: 'createdAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  contractNumber: 'contractNumber',
  rfqId: 'rfqId',
  vendorId: 'vendorId',
  contractValue: 'contractValue',
  currency: 'currency',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.VariationOrderScalarFieldEnum = {
  id: 'id',
  voRef: 'voRef',
  contractId: 'contractId',
  description: 'description',
  costImpact: 'costImpact',
  timeImpact: 'timeImpact',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.IPCScalarFieldEnum = {
  id: 'id',
  ipcNumber: 'ipcNumber',
  projectName: 'projectName',
  contractId: 'contractId',
  periodFrom: 'periodFrom',
  periodTo: 'periodTo',
  currentValue: 'currentValue',
  cumulativeValue: 'cumulativeValue',
  deductions: 'deductions',
  netPayable: 'netPayable',
  status: 'status',
  submittedById: 'submittedById',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  url: 'url',
  mimeType: 'mimeType',
  size: 'size',
  uploadedById: 'uploadedById',
  uploadedAt: 'uploadedAt',
  ipcId: 'ipcId',
  contractId: 'contractId'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  approverId: 'approverId',
  sequence: 'sequence',
  status: 'status',
  comment: 'comment',
  createdAt: 'createdAt',
  actedAt: 'actedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  body: 'body',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.VendorStatus = exports.$Enums.VendorStatus = {
  NEW: 'NEW',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  BLACKLISTED: 'BLACKLISTED'
};

exports.RFQStatus = exports.$Enums.RFQStatus = {
  DRAFT: 'DRAFT',
  ISSUED: 'ISSUED',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  AWARDED: 'AWARDED',
  CANCELED: 'CANCELED'
};

exports.IPCStatus = exports.$Enums.IPCStatus = {
  SUBMITTED: 'SUBMITTED',
  PROCUREMENT_REVIEW: 'PROCUREMENT_REVIEW',
  TECHNICAL_APPROVED: 'TECHNICAL_APPROVED',
  FINANCE_REVIEW: 'FINANCE_REVIEW',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  REJECTED: 'REJECTED'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ESCALATED: 'ESCALATED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Vendor: 'Vendor',
  VendorCategory: 'VendorCategory',
  VendorDocument: 'VendorDocument',
  CSI_Material: 'CSI_Material',
  PriceEntry: 'PriceEntry',
  RFQ: 'RFQ',
  RFQSubmission: 'RFQSubmission',
  Evaluation: 'Evaluation',
  Contract: 'Contract',
  VariationOrder: 'VariationOrder',
  IPC: 'IPC',
  Document: 'Document',
  Approval: 'Approval',
  AuditLog: 'AuditLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
